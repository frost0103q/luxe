///* ========================================================================
//   #FONT-SIZE
//   ======================================================================== */

// Generates a rem font-size and a baseline-compatible
// unitless line-height from a pixel font-size value. Basic usage is simply:
//
//   @include font-size(18px);
//
// You can force a specific line-height by passing it as the second argument:
//
//   @include font-size(16px, 1);
//
// You can also modify the line-height by increments, while staying in the
// baseline grid, by setting the `$modifier` parameter. It takes a positive
// or negative integer, and it will add or remove "lines" to the  generated
// line-height. This is the recomended way to do it, unless you really need
// an absolute value. i.e.:
//
//   // add 2 lines:
//   @include font-size(24px, $modifier: +2);
//
//   // subtract 1 line:
//   @include font-size(24px, $modifier: -1);

@mixin font-size(
	$font-size,
	$line-height: auto,
	$modifier: 0,
	$important: false
) {
	@if (type-of($font-size) == number) {
		@if (unit($font-size) != "px") {
			@error "`#{$font-size}` needs to be a pixel value.";
		}
	} @else {
		@error "`#{$font-size}` needs to be a number.";
	}

	@if ($important == true) {
		$important: !important;
	} @else if ($important == false) {
		$important: null;
	} @else {
		@error "`#{$important}` needs to be `true` or `false`.";
	}

	// Output the font size.
	font-size: ($font-size / $global-font-size) * 1rem $important;

	@if ($line-height == "auto") {

		// Define how many grid lines each text line should span.
		// By default, we set it to the minimum number of lines necessary
		// in order to contain the defined font-size, +1 for some breathing room.
		// This can be modified with the `$modifier` parameter.
		$lines: ceil($font-size / $global-baseline) + $modifier + 1;
		$line-height: $lines * $global-baseline;

		line-height: ($line-height / $font-size) $important;

	} @else {

		@if (type-of($line-height) == number or $line-height == "inherit" or $line-height == "normal") {
			line-height: $line-height $important;
		} @else if ($line-height != "none" and $line-height != false) {
			@error "Dâ€™oh! `#{$line-height}` is not a valid value for `$line-height`.";
		}
	}
}

@mixin responsive-font-size(
	$font-map-key
) {
	@if map-has-key($typography, $font-map-key) {
		$font-map: map-get($typography, $font-map-key);

		@each $breakpoint, $font-size in $font-map {
			@if $breakpoint == null {
				@include font-size($font-size);
			} @else {
				@include mq($breakpoint) {
					@include font-size($font-size);
				}
			}
		}
	} @else {
		@error "`#{$font-map-key}` is not a key from the `$typography` map.";
	}
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
	@if type-of($number) == "number" and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}


@mixin fluid-font-size($key) {
	$element: map-get($fluid-typography, $key);
	$min-font-size: nth($element, 1);
	$max-font-size: nth($element, 2);
	$total-bps: length($mq-breakpoints);
	$keys: map-keys($mq-breakpoints);
	$min-bp-key: nth($keys, 1);
	$max-bp-key: nth($keys, $total-bps);
	$min-bp: map-get($mq-breakpoints, $min-bp-key);
	$max-bp: map-get($mq-breakpoints, $max-bp-key);

	font-size: calc(#{$min-font-size} + (#{strip-unit($max-font-size)} - #{strip-unit($min-font-size)}) * ((100vw - #{$min-bp}) / (#{strip-unit($max-bp)} - #{strip-unit($min-bp)})));

	@include mq($max-bp-key) {
		font-size: $max-font-size;
	}
}
